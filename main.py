# Cc—ã–ª–∫–∞ –Ω–∞ –∏–≥—Ä–æ–≤—É—é –ö–∞—Ä—Ç—É üëáüèª https://1.bp.blogspot.com/-IXplOdXWc70/VNcARys7KpI/AAAAAAAAZjI/H3Xb4GDPJHs/s1600
# /Labirint.png
#
# –ü–æ–º–æ–≥–∞–µ–º –®–∞—Ä–∏–∫—É –Ω–∞–π—Ç–∏ –∫–æ—Å—Ç–æ—á–∫—É.
# –í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –®–∞—Ä–∏–∫ –∏–¥–µ—Ç –ø–æ –ª–∞–±–∏—Ä–∏–Ω—Ç—É.
#
# –¢–æ –µ—Å—Ç—å, –≤–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∏–¥—É–º–∞—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—à–µ–Ω–∏–π. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –í–≤–µ—Ä—Ö, –≤–Ω–∏–∑, –≤–ª–µ–≤–æ,
# –≤–ø—Ä–∞–≤–æ —á–µ—Ä–µ–∑ –∏–Ω–ø—É—Ç –∏–ª–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–ª–∞–≤–∏—à–∏, –∫–∞–∫ —Ö–æ—Ç–∏—Ç–µ.
#
# –£–°–õ–û–í–ò–Ø :
#
# 1.	–ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –≤—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å, —á—Ç–æ –®–∞—Ä–∏–∫ –Ω–∞—à–µ–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç–∏ –∏ –¥–∞–µ–º
# —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥.
# 2.	–ï—Å–ª–∏ –®–∞—Ä–∏–∫ –ø–æ—à–µ–ª –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å—Ç–µ–Ω—ã - –ø–∏—à–µ–º, —á—Ç–æ —à–∞—Ä–∏–∫ —É–¥–∞—Ä–∏–ª—Å—è –æ —Å—Ç–µ–Ω—É, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.
# 3.	–ï—Å–ª–∏ –®–∞—Ä–∏–∫ –≤–µ—Ä–Ω—É–ª—Å—è —Ç—É–¥–∞ –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —Ö–æ–¥—É - –≤—ã–≤–æ–¥–∏–º —à–∞—Ä–∏–∫ —Å—Ç—Ä—É—Å–∏–ª –∏ —É–±–µ–∂–∞–ª, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.
# 4.	–ï—Å–ª–∏ –®–∞—Ä–∏–∫ –≤—ã–±—Ä–∞–ª –Ω–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ö–æ–¥ - –≤—ã–≤–æ–¥–∏–º —à–∞—Ä–∏–∫ –∑–∞–±–ª—É–¥–∏–ª—Å—è, —Ç–æ–∂–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –∏–≥—Ä—É.
# 5.	–ï—Å–ª–∏ –®–∞—Ä–∏–∫ –ø—Ä–æ—à–µ–ª —á–µ—Ä–µ–∑ –≤—Å–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ö–æ–¥—ã - –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–±–µ–¥–æ–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É.
#
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û–ï –ó–ê–î–ê–ù–ò–ï :
#
# –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–π –≤ JSON. –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è, –ø—Ä–æ–≥—Ä–µ—Å—Å —à–∞—Ä–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –Ω–∞ —Ç–æ–π
# –ø–æ–∑–∏—Ü–∏–∏ —Å –∫–æ—Ç–æ—Ä–æ–π –æ–Ω —Å–¥–µ–ª–∞–ª –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ö–æ–¥. –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤–æ–π –∏–≥—Ä—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
# –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–≥—Ä–æ–∫—É –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ. –ü—Ä–∏ –æ—Ç–∫–∞–∑–µ —É–¥–∞–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å –Ω—É–ª—è.


class Dog:

    def __init__(self, user_answer=None):
        self.user_answer = user_answer

    def move(self):
        print('\n–®–∞—Ä–∏–∫, –≤ –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø–æ–π–¥—ë—à—å?')
        self.user_answer = input('–í–≤–µ–¥–∏ –æ–¥–Ω—É –∏–∑ –∫–æ–º–∞–Ω–¥: "down", "up", "left", "right"\n')

        if self.user_answer == "down":
            return 'down'
        elif self.user_answer == 'up':
            return 'up'
        elif self.user_answer == 'left':
            return 'left'
        elif self.user_answer == 'right':
            return 'right'
        else:
            return self.move()


class Labyrinth:

    def __init__(self, move_step):
        self.move_step = move_step

    labyrinth = [{'right': 'next', 'left': 'prev', 'down': 'wall', 'up': 'wall'},  # step 1
                 {'right': 'wall', 'left': 'prev', 'down': 'next', 'up': 'wall'},  # step 2
                 {'right': 'wall', 'left': 'next', 'down': 'wall', 'up': 'prev'},  # step 3
                 {'right': 'prev', 'left': 'wall', 'down': 'next', 'up': 'wall'},  # step 4
                 {'right': 'next', 'left': 'wall', 'down': 'wall', 'up': 'prev'},  # step 5
                 {'right': 'next', 'left': 'prev', 'down': 'wrong', 'up': 'wall'},  # step 6
                 {'right': 'next', 'left': 'prev', 'down': 'wall', 'up': 'wall'},  # step 7
                 {'right': 'next', 'left': 'prev', 'down': 'wall', 'up': 'wrong'},  # step 8
                 {'right': 'wall', 'left': 'prev', 'down': 'next', 'up': 'wrong'},  # step 9
                 {'right': 'wall', 'left': 'wrong', 'down': 'next', 'up': 'prev'},  # step 10
                 {'right': 'next', 'left': 'wall', 'down': 'wall', 'up': 'prev'},  # step 11
                 {'right': 'next', 'left': 'prev', 'down': 'wrong', 'up': 'wall'},  # step 12
                 {'right': 'next', 'left': 'prev', 'down': 'wall', 'up': 'wall'},  # step 13
                 {'right': 'next', 'left': 'prev', 'down': 'wall', 'up': 'wall'},  # step 14
                 {'right': 'wall', 'left': 'prev', 'down': 'next', 'up': 'wall'},  # step 15
                 {'right': 'wall', 'left': 'next', 'down': 'wall', 'up': 'prev'},  # step 16
                 {'right': 'prev', 'left': 'wall', 'down': 'next', 'up': 'wall'},  # step 17
                 {'right': 'wrong', 'left': 'wall', 'down': 'next', 'up': 'prev'},  # step 18
                 {'right': 'wall', 'left': 'next', 'down': 'wall', 'up': 'prev'},  # step 19
                 {'right': 'prev', 'left': 'wall', 'down': 'next', 'up': 'wall'},  # step 20
                 {'right': 'next', 'left': 'wrong', 'down': 'wall', 'up': 'prev'},  # step 21
                 {'right': 'wall', 'left': 'prev', 'down': 'next', 'up': 'wall'},  # step 22
                 {'right': 'next', 'left': 'wall', 'down': 'wall', 'up': 'prev'},  # step 23
                 {'right': 'next', 'left': '', 'down': '', 'up': ''}]  # step 24

    def start(self):
        if self.move_step == 0:
            print('----------')
            print('Start game')
            print('----------')

    def next(self):
        self.move_step += 1
        if self.is_win():
            return self.win()
        else:
            print("---------")
            print("Next step")
            print("---------")

    def game_over(self):
        self.move_step = 0
        print("---------")
        print("Game over")
        print("---------")

    def win(self):
        print("---------")
        print("You win!")
        print("---------")

    def is_right_side(self, side):
        if self._is_next(side):
            return self.next()
        elif self._is_wall(side) | self._is_prev(side) | self._is_wrong(side):
            return self.game_over()

    def _is_next(self, side):
        if self.labyrinth[self.move_step][side] == 'next':
            print("–®–∞—Ä–∏–∫ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏")
            return True
        else:
            return False

    def _is_wall(self, side):
        if self.labyrinth[self.move_step][side] == 'wall':
            print("–®–∞—Ä–∏–∫ —É–¥–∞—Ä–∏–ª—Å—è –æ —Å—Ç–µ–Ω—É, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
            return True
        else:
            return False

    def _is_prev(self, side):
        if self.labyrinth[self.move_step][side] == 'prev':
            print("–®–∞—Ä–∏–∫ —Å—Ç—Ä—É—Å–∏–ª –∏ —É–±–µ–∂–∞–ª, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
            return True
        else:
            return False

    def _is_wrong(self, side):
        if self.labyrinth[self.move_step][side] == 'wrong':
            print("–®–∞—Ä–∏–∫ –∑–∞–±–ª—É–¥–∏–ª—Å—è, –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
            return True
        else:
            return False

    def is_win(self):
        if self.move_step == len(labyrinth.labyrinth):
            return True
        else:
            return False


if __name__ == '__main__':
    sharick = Dog()
    labyrinth = Labyrinth(move_step=0)
    start_game = True

    while start_game:
        labyrinth.start()
        print(f"Num of step: {labyrinth.move_step + 1}")
        chosen_side = sharick.move()
        labyrinth.is_right_side(chosen_side)

        if labyrinth.is_win():
            break

    # combination for win: 1: right, 2: down, 3: left, 4: down, 5: right, 6: right, 7: right, 8: right, 9: down,
    # 10: down, 11: right, 12: right, 13: right, 14: right, 15: down, 16: left, 17: down, 18: down, 19: left,
    # 20: down, 21: right, 22: down, 23: right, 24: right
